/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SupervisorRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.Sensor;
import Business.Network.Network;
import Business.Organization.HydrologistOrganization;
import Business.Organization.LabourOrganization;
import Business.Organization.NetworkAdminOrganization;
import Business.Organization.Organization;
import Business.Organization.TechnicianOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.TechnicianWorkRequest;
import Business.WorkQueue.WaterLvlWorkRequest;
import Business.WorkQueue.WaterShortageWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import static userinterface.SupervisorRole.RandomVGen.randValGen;

/**
 *
 * @author Mayur
 */
public class ManageRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Network network;
    //private EcoSystem business;
    
    public ManageRequestJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.network = network;
        populateRequestTable();
        populateRequestComboBox();
        lblSupervisor.setText(userAccount.getEmployee().getName());
        waterAvailjLabel.setText(String.valueOf(enterprise.getWaterAvail()));
    }
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel)sensorDatajTable.getModel();
        model.setRowCount(0);
        Sensor s = enterprise.getCensor();
        //s.setSensorUID("s1");
            Object[] row = new Object[4];
            row[0] = s;
            row[1] = s.getWaterLevel();
            row[2] = s.getWaterPH();
            row[3] = s.isSensorStatus();
            
            model.addRow(row);
    
    }
    
    public void populateRequestComboBox(){
        RequestComboBox.removeAllItems();
        
        for (WorkRequest.RequestType type : WorkRequest.RequestType.values()) {
            RequestComboBox.addItem(type);
        }
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblSupervisor = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorDatajTable = new javax.swing.JTable();
        refreshTestJButton = new javax.swing.JButton();
        RequestComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnNewData = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        waterAvailjLabel = new javax.swing.JLabel();

        jLabel1.setText("Supervisor:");

        lblSupervisor.setText("jLabel2");

        sensorDatajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Sensor", "WaterLevel", "Water PH", "Sensor Status"
            }
        ));
        jScrollPane1.setViewportView(sensorDatajTable);

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        RequestComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        RequestComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Request Table");

        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        workRequestJTable.setForeground(new java.awt.Color(204, 204, 204));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result", "Request Date", "Resolve Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setGridColor(new java.awt.Color(153, 255, 255));
        jScrollPane3.setViewportView(workRequestJTable);

        btnNewData.setText("Get Sensor Data");
        btnNewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewDataActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Water Available:");

        waterAvailjLabel.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSupervisor)
                .addGap(38, 38, 38))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RequestComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backJButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnNewData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(refreshTestJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(27, 27, 27)
                                .addComponent(waterAvailjLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblSupervisor)
                    .addComponent(jLabel3)
                    .addComponent(waterAvailjLabel))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnAssign)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(RequestComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNewData)
                        .addGap(18, 18, 18)
                        .addComponent(refreshTestJButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backJButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();

    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private Object selectedItemInTable(JTable table){
        int selectedRow = table.getSelectedRow();
        if(selectedRow >= 0 ){
            Object object = table.getValueAt(selectedRow, 0);
            return object;
        }else {
            JOptionPane.showMessageDialog(null, "select one row");
            return null;
        }
    }
    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        //ACCORDING TO THRESHOLD REQUEST WILL GENRATED 
        Sensor sensor = (Sensor) selectedItemInTable(sensorDatajTable);
        int enterprise_waterLvl = enterprise.getWaterAvail();
        int sensor_waterLvl = sensor.getWaterLevel();
        int sensor_waterPH = sensor.getWaterPH();
        int sensor_waterlvlThr = sensor.getWaterThreshold();
        int sensor_cnt = enterprise.getSensorCount();
        int Enterprise_waterLvlThreshold = enterprise.getWaterThreshold();
        int Enterprise_waterStorage = enterprise.getWaterStorage();
        int MAX_waterPH = sensor.getMAX_PH();
        int MIN_waterPH = sensor.getMIN_PH();
        
        
        if(MAX_waterPH < sensor_waterPH || sensor_waterPH < MIN_waterPH){
            
            LabTestWorkRequest requestLT = new LabTestWorkRequest();
            requestLT.setMessage("CHECK");
            requestLT.setWaterPH(sensor_waterPH);
            requestLT.setSender(userAccount);
            requestLT.setStatus("sent");
            
            Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof HydrologistOrganization){
                        org = organization;
                        break;
                       }
                }
                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(requestLT);
                    userAccount.getWorkQueue().getWorkRequestList().add(requestLT);
                }
            
        }else{
        
            //iF WATER LEVEL IS BELOW THRESHOLD
        if(sensor_waterLvl < sensor_waterlvlThr){
            
            int waterReq = sensor_waterlvlThr - sensor_waterLvl;
            //WATER REQUIERED IS CHECKED WITH WATER AVAILABLE IN ENTERPRISE
            if(waterReq > 0 && waterReq < enterprise_waterLvl){
                // IF WATER AVAILABLE THEN SEND THE REQUEST TO LABOUR
                
                WaterLvlWorkRequest request = new WaterLvlWorkRequest();
                request.setMessage("Release");
                request.setWaterReq(waterReq);
                request.setSender(userAccount);
                request.setStatus("Sent");
            
                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof LabourOrganization){
                         org = organization;
                        break;
                    }
                }
                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                }
            }
        }    
            //IF WATER AVILABLE IN ENTERPRISE IS BELOW THRESHOLD THEN SEND REQUEST TO NETWORK
            if(enterprise_waterLvl < Enterprise_waterLvlThreshold){
                int waterShortage = Enterprise_waterStorage - enterprise_waterLvl;
                
                WaterShortageWorkRequest requestws = new WaterShortageWorkRequest();
                requestws.setMessage("ReleaseRequest");
                requestws.setWaterShortage(waterShortage);
                requestws.setSender(userAccount);
                requestws.setStatus("Sent");
                
                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof NetworkAdminOrganization){
                        org = organization;
                        break;
                       
                       }
                }
                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(requestws);
                    userAccount.getWorkQueue().getWorkRequestList().add(requestws);
                }
            }
        
        
        
        }
        
        if(!sensor.isSensorStatus()){
            TechnicianWorkRequest requestT = new TechnicianWorkRequest();
            requestT.setMessage("CHECK");
            
            requestT.setSender(userAccount);
            requestT.setStatus("sent");
            
            Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof TechnicianOrganization){
                        org = organization;
                        break;
                       }
                }
                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(requestT);
                    userAccount.getWorkQueue().getWorkRequestList().add(requestT);
                }
        }
        
        
       // populateRequestCreatedTable();
        
    }//GEN-LAST:event_btnAssignActionPerformed

    public void  populateRequestCreatedTable(WorkRequest.RequestType requestType){
    
        //WorkRequest.RequestType requestType = (WorkRequest.RequestType) RequestComboBox.getSelectedItem();
        
         DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
        if( requestType != null){    
            Object[] row = new Object[6];
           /* row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();*/
            //ifrequest instanceof requestType
            // if(requestType.equals(request))
            if(request.getClass().getName().contains(requestType.getValue())){
            row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            
            if(requestType.getValue().equals("LabTestWorkRequest")){
            String result = ((LabTestWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
            }
            
            if(requestType.getValue().equals("WaterLvlWorkRequest")){
            String result = ((WaterLvlWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
             }
            
             if(requestType.getValue().equals("TechnicianWorkRequest")){
            String result = ((TechnicianWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
             }
              if(requestType.getValue().equals("WaterShortageWorkRequest")){
            String result = ((WaterShortageWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
             }
             
            row[4] = request.getRequestDate();
            row[5] = request.getResolveDate();
            model.addRow(row);
            }
            else if(request.getClass().getName().contains(requestType.getValue())){
                  row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
             if(requestType.equals("WaterLvlWorkRequest")){
            String result = ((WaterLvlWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
             }
            row[4] = request.getRequestDate();
            row[5] = request.getResolveDate();
            model.addRow(row);
            }
            /*
            else if(request.getClass().getName().contains(requestType.getValue())){
                 row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
             if(requestType.equals("TechnicianWorkRequest")){
            String result = ((TechnicianWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
             }
                row[4] = request.getRequestDate();
            row[5] = request.getResolveDate();
            model.addRow(row);
            }
            else if(request.getClass().getName().contains(requestType.getValue())){
                row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
             if(requestType.equals("WaterShortageWorkRequest")){
            String result = ((WaterShortageWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
             }
             row[4] = request.getRequestDate();
            row[5] = request.getResolveDate();
            model.addRow(row);
            }/*
           /* row[4] = request.getRequestDate();
            row[5] = request.getResolveDate();
            */
            
        }
        }
    }
    private void RequestComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestComboBoxActionPerformed
        
        WorkRequest.RequestType requestType = (WorkRequest.RequestType) RequestComboBox.getSelectedItem();
        populateRequestCreatedTable(requestType);
    }//GEN-LAST:event_RequestComboBoxActionPerformed

    private void btnNewDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewDataActionPerformed

        newData();
        
    }//GEN-LAST:event_btnNewDataActionPerformed

    public void newData(){
    
        Sensor s = enterprise.getCensor();
        
        s.setSensorUID("s"+randValGen(1,enterprise.getSensorCount()+1));
        s.setWaterLevel(randValGen(20,50));
        s.setWaterThreshold(30);
        s.setWaterPH(randValGen(5, 10));
        int sa = randValGen(0, 2);
        if(sa == 0){
            s.setSensorStatus(false);
        }else{
             s.setSensorStatus(true);
        }
        s.setCurrentTime(new Date());
        
        populateRequestTable();
        //timerON();
    
    }
    public void timerON(){
        Timer timer = new Timer();
        TimerTask task = new TimerTask()
        {
            public void run(){
            
                JOptionPane.showMessageDialog(null, "Got new Data");
                newData();
            }
        
        };
        timer.scheduleAtFixedRate(task,1000 ,6000);
    }
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
              
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox RequestComboBox;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnNewData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblSupervisor;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JTable sensorDatajTable;
    private javax.swing.JLabel waterAvailjLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
